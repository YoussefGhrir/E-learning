{% extends 'base.html.twig' %}

{% block title %}Poste index{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('css/post.css') }}">
    <style>
        /* Style pour les commentaires */
        #modal-comments-list li {
            border: 1px solid #dee2e6; /* Bordure légère */
            background-color: #ffffff; /* Fond blanc */
            border-radius: 8px; /* Coins arrondis */
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* Ombre plus marquée */
            padding: 15px;
            margin-bottom: 10px;
        }

        #modal-comments-list li:last-child {
            border-bottom: none;
        }

        /* Style pour l'avatar */
        .rounded-circle {
            border: 2px solid #fff;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.2); /* Ombre plus marquée */
            width: 50px; /* Taille augmentée */
            height: 50px; /* Taille augmentée */
            object-fit: cover;
        }

        /* Style pour le cadre "Pas de photo" */
        .bg-secondary {
            background-color: #6c757d !important;
            width: 50px; /* Taille augmentée */
            height: 50px; /* Taille augmentée */
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
        }

        .bg-secondary span {
            font-size: 12px;
            color: #fff;
        }

        /* Style pour les boutons Modifier et Supprimer */
        .btn-edit-comment, .btn-delete-comment {
            padding: 8px 12px; /* Plus d'espace */
            font-size: 14px; /* Taille de police augmentée */
            margin-right: 5px;
            border: none;
            border-radius: 5px;
            display: inline-flex;
            align-items: center;
            transition: background-color 0.3s ease; /* Transition douce */
        }

        .btn-edit-comment {
            background-color: #007bff; /* Couleur bleue */
            color: #fff; /* Texte blanc */
        }

        .btn-edit-comment:hover {
            background-color: #0056b3; /* Couleur plus foncée au survol */
        }

        .btn-delete-comment {
            background-color: #dc3545; /* Couleur rouge */
            color: #fff; /* Texte blanc */
        }

        .btn-delete-comment:hover {
            background-color: #c82333; /* Couleur plus foncée au survol */
        }

        .btn-edit-comment i, .btn-delete-comment i {
            margin-right: 5px;
        }

        /* Style pour le modal */
        .modal-dialog {
            max-width: 600px; /* Largeur maximale réduite */
            width: 90%; /* Largeur par défaut */
        }

        .modal-body {
            max-height: 80vh; /* Hauteur maximale augmentée */
            overflow-y: auto; /* Scroll si nécessaire */
        }

        /* Style pour le champ de modification */
        .edit-comment-textarea {
            width: 100%;
            padding: 10px; /* Plus d'espace */
            border: 1px solid #ced4da; /* Bordure grise */
            border-radius: 8px; /* Coins arrondis */
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1); /* Ombre légère */
            resize: vertical;
        }

        /* Style pour les boutons de modification */
        .edit-comment-buttons {
            margin-top: 10px;
            display: flex;
            gap: 10px;
        }

        .edit-comment-buttons button {
            padding: 5px 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .edit-comment-buttons button.save {
            background-color: #28a745;
            color: white;
        }

        .edit-comment-buttons button.cancel {
            background-color: #6c757d;
            color: white;
        }
    </style>
{% endblock %}

{% block body %}
    <div style="height: 70px;"></div>

    <section>
        <div class="container">
            <div class="row">
                {% for poste in postes %}
                    {% set imageName = poste.image %}
                    <!-- Single Post -->
                    <div class="col-lg-6 col-md-6">
                        <article class="tour-box list-style" data-poste-id="{{ poste.id }}" data-contenu-complet="{{ poste.contenu }}">
                            <div class="tour-box-image">
                                <img src="{{ asset('uploads/uploadposte/' ~ imageName) }}" alt="">
                            </div>
                            <div class="inner-box">
                                <h3 class="entry-title">
                                    <a>{{ poste.title }}</a>
                                </h3>
                                <div class="entry-content">
                                    <p>{{ poste.contenu|length > 13 ? poste.contenu|slice(0, 13) ~ '...' : poste.contenu }}</p>
                                </div>
                                <!-- Display Categories -->
                                <div class="categories">
                                    {% for category in poste.categories %}
                                        <span class="badge bg-primary">{{ category.tag }}</span>
                                    {% endfor %}
                                </div>
                                <div class="d-flex">
                                    {% set isLiked = poste.id in likedPostes %}<button class="btn btn-like" data-poste-id="{{ poste.id }}">
                                        <i class="{{ poste.id in likedPostes ? 'fa-solid fa-heart' : 'fa-regular fa-heart' }}"
                                           style="color: {{ poste.id in likedPostes ? 'red' : '' }}"></i>
                                        <span class="like-count">{{ poste.getLikeCount() }}</span>
                                    </button>
                                    <button class="btn btn-comment">
                                        <i class="fa-regular fa-comment"></i> Comment
                                    </button>
                                    {% if poste.user.id == user.id %}
                                        <a href="{{ path('app_poste_edit', {id: poste.id}) }}" class="btn btn-modifier">Modifier</a>
                                        <form class="delete-form" data-id="{{ poste.id }}" method="POST" action="{{ path('app_poste_delete', {id: poste.id}) }}">
                                            <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ poste.id) }}">
                                            <button type="submit" class="btn btn-supprimer">Supprimer</button>
                                        </form>
                                    {% endif %}
                                </div>
                            </div>
                        </article>
                    </div>
                {% endfor %}
            </div>
        </div>
    </section>

    <!-- Modal -->
    <div class="modal fade" id="commentModal" tabindex="-1" aria-labelledby="commentModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="commentModalLabel">Commentaires</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Post Content -->
                    <div class="mb-4">
                        <img id="modal-post-image" src="" class="img-fluid rounded" alt="Post Image">
                        <p id="modal-post-content" class="mt-3"></p>
                    </div>

                    <!-- Comments Section -->
                    <h5>Commentaires:</h5>
                    <div id="modal-comments-container">
                        <ul id="modal-comments-list" class="list-unstyled">
                            <!-- Comments will be dynamically inserted here -->
                        </ul>
                    </div>

                    <!-- Add Comment Form -->
                    <form id="comment-form" class="mt-3">
                        <input type="hidden" id="modal-post-id">
                        <div class="mb-3">
                            <textarea id="comment-text" class="form-control" placeholder="Écrivez un commentaire..." rows="3" required></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Publier</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const currentUserId = {{ app.user.id|json_encode|raw }};

            function loadComments(postId) {
                fetch(`/poste/comments/${postId}`)
                    .then(response => response.json())
                    .then(data => {
                        const commentsList = document.getElementById("modal-comments-list");
                        commentsList.innerHTML = "";

                        data.comments.forEach(comment => {
                            const li = document.createElement("li");
                            li.classList.add("mb-3", "p-3", "bg-light", "rounded");
                            li.dataset.id = comment.id;
                            li.innerHTML = `
                            <div class="d-flex align-items-center mb-2">
                                <div class="flex-shrink-0">
                                    ${comment.user.profilePicture
                                ? `<img src="${comment.user.profilePicture}" alt="${comment.user.firstName}" class="rounded-circle" width="40" height="40">`
                                : `<div class="rounded-circle bg-secondary">
                                            <span class="text-white">Pas de photo</span>
                                        </div>`
                            }
                                </div>
                                <div class="flex-grow-1 ms-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <strong>${comment.user.firstName} ${comment.user.lastName}</strong>
                                        <small class="text-muted">${new Date(comment.createdAt).toLocaleString('fr-FR', {
                                year: 'numeric',
                                month: 'numeric',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit'
                            })}</small>
                                    </div>
                                    <p class="mb-0 comment-content">${comment.content}</p>
                                    ${comment.user.id === currentUserId
                                ? `<div class="mt-2">
                                            <button class="btn btn-sm btn-warning btn-edit-comment" data-comment-id="${comment.id}">
                                                <i class="fas fa-edit"></i> Modifier
                                            </button>
                                            <button class="btn btn-sm btn-danger btn-delete-comment" data-comment-id="${comment.id}">
                                                <i class="fas fa-trash"></i> Supprimer
                                            </button>
                                        </div>`
                                : ''
                            }
                                </div>
                            </div>
                        `;
                            commentsList.appendChild(li);
                        });
                        attachCommentEventListeners();
                    })
                    .catch(error => console.error("Erreur lors du chargement des commentaires:", error));
            }

            function attachCommentEventListeners() {
                document.querySelectorAll(".btn-delete-comment").forEach(button => {
                    button.addEventListener("click", function () {
                        const commentId = this.dataset.commentId;
                        if (confirm("Êtes-vous sûr de vouloir supprimer ce commentaire ?")) {
                            fetch(`/poste/comment/delete/${commentId}`, {
                                method: "POST",
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        loadComments(document.getElementById("modal-post-id").value);
                                    }
                                })
                                .catch(error => console.error("Erreur lors de la suppression du commentaire:", error));
                        }
                    });
                });

                document.querySelectorAll(".btn-edit-comment").forEach(button => {
                    button.addEventListener("click", function () {
                        const commentId = this.dataset.commentId;
                        const commentElement = document.querySelector(`li[data-id="${commentId}"]`);
                        const commentContent = commentElement.querySelector(".comment-content");
                        const currentContent = commentContent.textContent;

                        const textarea = document.createElement("textarea");
                        textarea.classList.add("edit-comment-textarea");
                        textarea.value = currentContent;

                        const buttonsDiv = document.createElement("div");
                        buttonsDiv.classList.add("edit-comment-buttons");
                        buttonsDiv.innerHTML = `
                        <button class="save">Enregistrer</button>
                        <button class="cancel">Annuler</button>
                    `;

                        commentContent.replaceWith(textarea);
                        commentElement.querySelector("div.mt-2").replaceWith(buttonsDiv);

                        buttonsDiv.querySelector("button.cancel").addEventListener("click", function () {
                            // Remplacer le textarea par le contenu original
                            textarea.replaceWith(commentContent);

                            // Recréer les boutons Modifier et Supprimer
                            const buttonsDivNew = document.createElement("div");
                            buttonsDivNew.classList.add("mt-2");
                            buttonsDivNew.innerHTML = `
        <button class="btn btn-sm btn-warning btn-edit-comment" data-comment-id="${commentId}">
            <i class="fas fa-edit"></i> Modifier
        </button>
        <button class="btn btn-sm btn-danger btn-delete-comment" data-comment-id="${commentId}">
            <i class="fas fa-trash"></i> Supprimer
        </button>
    `;

                            // Remplacer les anciens boutons par les nouveaux
                            commentElement.querySelector("div.mt-2").replaceWith(buttonsDivNew);

                            // Réattacher les événements pour les nouveaux boutons
                            attachCommentEventListeners();
                        });

// Gestion de l'enregistrement
                        buttonsDiv.querySelector("button.save").addEventListener("click", function () {
                            const newContent = textarea.value.trim();
                            if (newContent) {
                                fetch(`/poste/comment/edit/${commentId}`, {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json",
                                    },
                                    body: JSON.stringify({ content: newContent }),
                                })
                                    .then(response => response.json())
                                    .then(data => {
                                        if (data.success) {
                                            loadComments(document.getElementById("modal-post-id").value); // Recharger les commentaires
                                        }
                                    })
                                    .catch(error => console.error("Erreur lors de la modification du commentaire:", error));
                            }
                        });
                    });
                });
            }

            document.querySelectorAll(".tour-box").forEach(box => {
                box.addEventListener("click", function () {
                    const postId = this.getAttribute("data-poste-id");
                    document.getElementById("modal-post-id").value = postId;
                    document.getElementById("modal-post-image").src = this.querySelector("img").src;
                    document.getElementById("modal-post-content").textContent = this.querySelector(".entry-content p").textContent;

                    loadComments(postId);

                    const commentModal = new bootstrap.Modal(document.getElementById("commentModal"));
                    commentModal.show();
                });
            });

            document.getElementById("comment-form").addEventListener("submit", function (event) {
                event.preventDefault();
                const postId = document.getElementById("modal-post-id").value;
                const commentText = document.getElementById("comment-text").value.trim();

                if (!commentText) return;

                fetch(`/poste/comment/add/${postId}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ content: commentText }),
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            document.getElementById("comment-text").value = "";
                            loadComments(postId);
                        }
                    })
                    .catch(error => console.error("Erreur lors de l'ajout du commentaire:", error));
            });
        });

        document.querySelectorAll(".btn-like").forEach(button => {
            button.addEventListener("click", function (event) {
                event.stopPropagation();
                const postId = this.getAttribute("data-poste-id");
                const isLiked = this.querySelector("i").classList.contains("fa-solid");

                fetch(`/like/toggle/${postId}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-Requested-With": "XMLHttpRequest",
                    },
                    body: JSON.stringify({ like: !isLiked }),
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error("Erreur réseau");
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            const likeIcon = this.querySelector("i");
                            const likeCount = this.querySelector(".like-count");

                            if (data.liked) {
                                likeIcon.classList.remove("fa-regular");
                                likeIcon.classList.add("fa-solid");
                                likeIcon.style.color = "red";
                            } else {
                                likeIcon.classList.remove("fa-solid");
                                likeIcon.classList.add("fa-regular");
                                likeIcon.style.color = "";
                            }

                            likeCount.textContent = data.likesCount;
                        } else {
                            console.error("Erreur :", data.message);
                        }
                    })
                    .catch(error => {
                        console.error("Erreur lors de la gestion du like:", error);
                    });
            });
        });
    </script>
{% endblock %}

{% block javascripts %}
<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
{% endblock %}