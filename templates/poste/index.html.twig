{% extends 'base.html.twig' %}

{% block title %}Post Index{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('css/post.css') }}">
    <style>
        /* Style for comments */
        #modal-comments-list li {
            border: 1px solid #dee2e6; /* Light border */
            background-color: #ffffff; /* White background */
            border-radius: 8px; /* Rounded corners */
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* More pronounced shadow */
            padding: 15px;
            margin-bottom: 10px;
        }

        #modal-comments-list li:last-child {
            border-bottom: none;
        }

        /* Style for the avatar */
        .rounded-circle {
            border: 2px solid #fff;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.2); /* More pronounced shadow */
            width: 50px; /* Increased size */
            height: 50px; /* Increased size */
            object-fit: cover;
        }

        /* Style for the "No photo" frame */
        .bg-secondary {
            background-color: #6c757d !important;
            width: 50px; /* Increased size */
            height: 50px; /* Increased size */
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
        }

        .bg-secondary span {
            font-size: 12px;
            color: #fff;
        }

        /* Style for Edit and Delete buttons */
        .btn-edit-comment, .btn-delete-comment {
            padding: 8px 12px; /* More space */
            font-size: 14px; /* Increased font size */
            margin-right: 5px;
            border: none;
            border-radius: 5px;
            display: inline-flex;
            align-items: center;
            transition: background-color 0.3s ease; /* Smooth transition */
        }

        .btn-edit-comment {
            background-color: #007bff; /* Blue color */
            color: #fff; /* White text */
        }

        .btn-edit-comment:hover {
            background-color: #0056b3; /* Darker color on hover */
        }

        .btn-delete-comment {
            background-color: #dc3545; /* Red color */
            color: #fff; /* White text */
        }

        .btn-delete-comment:hover {
            background-color: #c82333; /* Darker color on hover */
        }

        .btn-edit-comment i, .btn-delete-comment i {
            margin-right: 5px;
        }

        /* Style for the modal */
        .modal-dialog {
            max-width: 600px; /* Reduced maximum width */
            width: 90%; /* Default width */
        }

        .modal-body {
            max-height: 80vh; /* Increased maximum height */
            overflow-y: auto; /* Scroll if necessary */
        }





        .edit-comment-buttons button {
            padding: 5px 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .edit-comment-buttons button.save {
            background-color: #28a745;
            color: white;
        }

        .edit-comment-buttons button.cancel {
            background-color: #6c757d;
            color: white;
        }

        .report-btn {
            background-color: #ffcc00;
            color: black;
        }

        .report-btn:hover {
            background-color: #e6b800;
        }
        /* Modern and chic styles for search, filter, and sort section */
        .search-filter-sort-section {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }

        .search-filter-sort-section input, .search-filter-sort-section select {
            border: 2px solid #e0e0e0;
            border-radius: 25px;
            padding: 10px 20px;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        .search-filter-sort-section input:focus, .search-filter-sort-section select:focus {
            border-color: #007bff;
            box-shadow: 0 0 8px rgba(0, 123, 255, 0.25);
        }

        .search-filter-sort-section input::placeholder {
            color: #999;
        }

        .search-filter-sort-section select {
            appearance: none;
            background-color: white;
            background-image: url("data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23007BFF%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E");
            background-repeat: no-repeat, repeat;
            background-position: right 10px top 50%, 0 0;
            background-size: 12px auto, 100%;
        }

        .search-filter-sort-section .form-control, .search-filter-sort-section .form-select {
            margin-bottom: 15px;
        }



        /* Additional styles for the posts */
        .tour-box {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .tour-box:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        }
    </style>

{% endblock %}

{% block body %}
    <section class="search-filter-sort-section">
        <div class="container">
            <div class="row">
                <div class="col-md-4">
                    <input type="text" id="search-input" class="form-control" placeholder="üîç Rechercher un post...">
                </div>
                <div class="col-md-4">
                    <select id="filter-category" class="form-select">
                        <option value="">Toutes les cat√©gories</option>
                        <!-- Options will be populated dynamically -->
                    </select>
                </div>
                <div class="col-md-4">
                    <select id="sort-options" class="form-select">
                        <option value="default">Trier par...</option>
                        <option value="title-asc">Titre (A-Z)</option>
                        <option value="title-desc">Titre (Z-A)</option>
                        <option value="likes">Nombre de likes</option>
                    </select>
                </div>
            </div>
        </div>
    </section>
    <section>
        <div class="container">
            <div class="row">
                {% for poste in postes %}
                    {% set imageName = poste.image %}
                    <!-- Single Post -->
                    <div class="col-lg-6 col-md-6">
                        <article class="tour-box list-style" data-poste-id="{{ poste.id }}" data-contenu-complet="{{ poste.contenu }}">
                            <div class="tour-box-image">
                                <img src="{{ asset('uploads/uploadposte/' ~ imageName) }}" alt="">
                            </div>
                            <div class="inner-box">
                                <h3 class="entry-title">
                                    <a>{{ poste.title }}</a>
                                </h3>
                                <div class="entry-content">
                                    <p>{{ poste.contenu|length > 13 ? poste.contenu|slice(0, 1000) ~ '...' : poste.contenu }}</p>
                                </div>
                                <!-- Display Categories -->
                                <div class="categories">
                                    {% for category in poste.categories %}
                                        <span class="badge bg-primary">{{ category.tag }}</span>
                                    {% endfor %}
                                </div>
                                <div class="d-flex">
                                    {% set isLiked = poste.id in likedPostes %}<button class="btn btn-like" data-poste-id="{{ poste.id }}">
                                        <i class="{{ poste.id in likedPostes ? 'fa-solid fa-heart' : 'fa-regular fa-heart' }}"
                                           style="color: {{ poste.id in likedPostes ? 'red' : '' }}"></i>
                                        <span class="like-count">{{ poste.getLikeCount() }}</span>
                                    </button>
                                    <button class="btn btn-comment">
                                        <i class="fa-regular fa-comment"></i> Comment
                                    </button>
                                    <button class="report-btn" data-id="{{ poste.id }}" title="Report">
                                        <i class="fas fa-exclamation-triangle"></i> Report
                                    </button>
                                </div>
                            </div>
                        </article>
                    </div>
                {% endfor %}
            </div>
        </div>
    </section>

    <!-- Modal -->
    <div class="modal fade" id="commentModal" tabindex="-1" aria-labelledby="commentModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="commentModalLabel">Comments</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Post Content -->
                    <div class="mb-4">
                        <img id="modal-post-image" src="" class="img-fluid rounded" alt="Post Image">
                        <p id="modal-post-content" class="mt-3"></p>
                    </div>

                    <!-- Comments Section -->
                    <h5>Comments:</h5>
                    <div id="modal-comments-container">
                        <ul id="modal-comments-list" class="list-unstyled">
                            <!-- Comments will be dynamically inserted here -->
                        </ul>
                    </div>

                    <!-- Add Comment Form -->
                    <form id="comment-form" class="mt-3">
                        <input type="hidden" id="modal-post-id">
                        <div class="mb-3">
                            <textarea id="comment-text" class="form-control" placeholder="Write a comment..." rows="3" required></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Publish</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const currentUserId = {{ app.user.id|json_encode|raw }};

            function loadComments(postId) {
                fetch(`/poste/comments/${postId}`)
                    .then(response => response.json())
                    .then(data => {
                        const commentsList = document.getElementById("modal-comments-list");
                        commentsList.innerHTML = "";

                        data.comments.forEach(comment => {
                            const li = document.createElement("li");
                            li.classList.add("mb-3", "p-3", "bg-light", "rounded");
                            li.dataset.id = comment.id;
                            li.innerHTML = `
                        <div class="d-flex align-items-center mb-2">
                            <div class="flex-shrink-0">
                                ${comment.user.profilePicture
                                ? `<img src="${comment.user.profilePicture}" alt="${comment.user.firstName}" class="rounded-circle" width="40" height="40">`
                                : `<div class="rounded-circle bg-secondary">
                                        <span class="text-white">No photo</span>
                                    </div>`
                            }
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <strong>${comment.user.firstName} ${comment.user.lastName}</strong>
                                    <small class="text-muted">${new Date(comment.createdAt).toLocaleString('fr-FR', {
                                year: 'numeric',
                                month: 'numeric',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit'
                            })}</small>
                                </div>
                                <p class="mb-0 comment-content">${comment.content}</p>
                                ${comment.user.id === currentUserId
                                ? `<div class="mt-2">
                                        <button class="btn btn-sm btn-warning btn-edit-comment" data-comment-id="${comment.id}">
                                            <i class="fas fa-edit"></i> Edit
                                        </button>
                                        <button class="btn btn-sm btn-danger btn-delete-comment" data-comment-id="${comment.id}">
                                            <i class="fas fa-trash"></i> Delete
                                        </button>
                                    </div>`
                                : ''
                            }
                            </div>
                        </div>
                    `;
                            commentsList.appendChild(li);
                        });
                        attachCommentEventListeners();
                    })
                    .catch(error => console.error("Error loading comments:", error));
            }

            function attachCommentEventListeners() {
                document.querySelectorAll(".btn-delete-comment").forEach(button => {
                    button.addEventListener("click", function () {
                        const commentId = this.dataset.commentId;
                        if (confirm("Are you sure you want to delete this comment?")) {
                            fetch(`/poste/comment/delete/${commentId}`, {
                                method: "POST",
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        loadComments(document.getElementById("modal-post-id").value);
                                    }
                                })
                                .catch(error => console.error("Error deleting comment:", error));
                        }
                    });
                });

                document.querySelectorAll(".btn-edit-comment").forEach(button => {
                    button.addEventListener("click", function () {
                        const commentId = this.dataset.commentId;
                        const commentElement = document.querySelector(`li[data-id="${commentId}"]`);
                        const commentContent = commentElement.querySelector(".comment-content");
                        const currentContent = commentContent.textContent;

                        const textarea = document.createElement("textarea");
                        textarea.classList.add("edit-comment-textarea");
                        textarea.value = currentContent;

                        const buttonsDiv = document.createElement("div");
                        buttonsDiv.classList.add("edit-comment-buttons");
                        buttonsDiv.innerHTML = `
                    <button class="save">Save</button>
                    <button class="cancel">Cancel</button>
                `;

                        commentContent.replaceWith(textarea);
                        commentElement.querySelector("div.mt-2").replaceWith(buttonsDiv);

                        buttonsDiv.querySelector("button.cancel").addEventListener("click", function () {
                            // Replace the textarea with the original content
                            textarea.replaceWith(commentContent);

                            // Recreate the Edit and Delete buttons
                            const buttonsDivNew = document.createElement("div");
                            buttonsDivNew.classList.add("mt-2");
                            buttonsDivNew.innerHTML = `
                        <button class="btn btn-sm btn-warning btn-edit-comment" data-comment-id="${commentId}">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="btn btn-sm btn-danger btn-delete-comment" data-comment-id="${commentId}">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    `;

                            // Replace the old buttons with the new ones
                            commentElement.querySelector("div.mt-2").replaceWith(buttonsDivNew);

                            // Reattach events for the new buttons
                            attachCommentEventListeners();
                        });

                        // Handling save
                        buttonsDiv.querySelector("button.save").addEventListener("click", function () {
                            const newContent = textarea.value.trim();
                            if (newContent) {
                                fetch(`/poste/comment/edit/${commentId}`, {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json",
                                    },
                                    body: JSON.stringify({ content: newContent }),
                                })
                                    .then(response => response.json())
                                    .then(data => {
                                        if (data.success) {
                                            loadComments(document.getElementById("modal-post-id").value); // Reload comments
                                        }
                                    })
                                    .catch(error => console.error("Error editing comment:", error));
                            }
                        });
                    });
                });
            }

            document.querySelectorAll(".tour-box").forEach(box => {
                box.addEventListener("click", function () {
                    const postId = this.getAttribute("data-poste-id");
                    document.getElementById("modal-post-id").value = postId;
                    document.getElementById("modal-post-image").src = this.querySelector("img").src;

                    // R√©cup√©rer le contenu complet depuis l'attribut data-contenu-complet
                    const contenuComplet = this.getAttribute("data-contenu-complet");
                    document.getElementById("modal-post-content").textContent = contenuComplet;

                    loadComments(postId);

                    const commentModal = new bootstrap.Modal(document.getElementById("commentModal"));
                    commentModal.show();
                });
            });

            document.getElementById("comment-form").addEventListener("submit", function (event) {
                event.preventDefault();
                const postId = document.getElementById("modal-post-id").value;
                const commentText = document.getElementById("comment-text").value.trim();

                if (!commentText) return;

                fetch(`/poste/comment/add/${postId}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ content: commentText }),
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            document.getElementById("comment-text").value = "";
                            loadComments(postId);
                        }
                    })
                    .catch(error => console.error("Error adding comment:", error));
            });
        });

        document.querySelectorAll(".btn-like").forEach(button => {
            button.addEventListener("click", function (event) {
                event.stopPropagation();
                const postId = this.getAttribute("data-poste-id");
                const isLiked = this.querySelector("i").classList.contains("fa-solid");

                fetch(`/like/toggle/${postId}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-Requested-With": "XMLHttpRequest",
                    },
                    body: JSON.stringify({ like: !isLiked }),
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error("Network error");
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            const likeIcon = this.querySelector("i");
                            const likeCount = this.querySelector(".like-count");

                            if (data.liked) {
                                likeIcon.classList.remove("fa-regular");
                                likeIcon.classList.add("fa-solid");
                                likeIcon.style.color = "red";
                            } else {
                                likeIcon.classList.remove("fa-solid");
                                likeIcon.classList.add("fa-regular");
                                likeIcon.style.color = "";
                            }

                            likeCount.textContent = data.likesCount;
                        } else {
                            console.error("Error:", data.message);
                        }
                    })
                    .catch(error => {
                        console.error("Error handling like:", error);
                    });
            });
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll(".report-btn").forEach(button => {
                button.addEventListener("click", function (event) {
                    event.stopPropagation();
                    const postId = this.getAttribute("data-id");

                    if (confirm("Do you really want to report this post?")) {
                        fetch(`/poste/report/${postId}`, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                "X-Requested-With": "XMLHttpRequest",
                            },
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    alert("Post reported successfully!");
                                } else {
                                    alert("Error: " + data.message);
                                }
                            })
                            .catch(error => console.error("Error reporting post:", error));
                    }
                });
            });
        });
    </script>
    <script>document.addEventListener("DOMContentLoaded", function () {
            const postContainer = document.querySelector(".row"); // Conteneur des posts
            const posts = document.querySelectorAll(".tour-box.list-style"); // Liste des posts

            const searchInput = document.getElementById("search-input");
            const categorySelect = document.getElementById("filter-category");
            const sortSelect = document.getElementById("sort-options");

            // Remplir les cat√©gories disponibles pour le filtrage
            const categories = new Set();

            posts.forEach(post => {
                post.querySelectorAll(".categories .badge").forEach(badge => {
                    categories.add(badge.textContent);
                });
            });

            categories.forEach(category => {
                const option = document.createElement("option");
                option.value = category;
                option.textContent = category;
                categorySelect.appendChild(option);
            });

            // Fonction pour filtrer les posts
            function filterPosts() {
                const searchValue = searchInput.value.toLowerCase();
                const selectedCategory = categorySelect.value;

                posts.forEach(post => {
                    const title = post.querySelector(".entry-title a").textContent.toLowerCase();
                    const content = post.querySelector(".entry-content p").textContent.toLowerCase();
                    const categories = Array.from(post.querySelectorAll(".categories .badge")).map(badge => badge.textContent);

                    const matchesSearch = title.includes(searchValue) || content.includes(searchValue);
                    const matchesCategory = !selectedCategory || categories.includes(selectedCategory);

                    post.parentElement.style.display = matchesSearch && matchesCategory ? "block" : "none";
                });
            }

            // Fonction pour trier les posts
            function sortPosts() {
                const sortValue = sortSelect.value;
                let sortedPosts = Array.from(posts);

                if (sortValue === "title-asc") {
                    sortedPosts.sort((a, b) => a.querySelector(".entry-title a").textContent.localeCompare(b.querySelector(".entry-title a").textContent));
                } else if (sortValue === "title-desc") {
                    sortedPosts.sort((a, b) => b.querySelector(".entry-title a").textContent.localeCompare(a.querySelector(".entry-title a").textContent));
                } else if (sortValue === "likes") {
                    sortedPosts.sort((a, b) => {
                        const likesA = parseInt(a.querySelector(".like-count").textContent, 10) || 0;
                        const likesB = parseInt(b.querySelector(".like-count").textContent, 10) || 0;
                        return likesB - likesA;
                    });
                }

                // R√©ordonner les posts dans le DOM
                sortedPosts.forEach(post => post.parentElement.parentElement.appendChild(post.parentElement));
            }

            // √âcouteurs d'√©v√©nements
            searchInput.addEventListener("input", filterPosts);
            categorySelect.addEventListener("change", filterPosts);
            sortSelect.addEventListener("change", sortPosts);
        });
    </script>
{% endblock %}

{% block javascripts %}
    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
{% endblock %}